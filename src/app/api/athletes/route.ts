import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { AthletesStorage, type Athlete } from '@/lib/athletes-storage';

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
export async function GET(request: Request) {
  try {
    const url = new URL(request.url);
    const discipline = url.searchParams.get('discipline');
    const country = url.searchParams.get('country');
    const license = url.searchParams.get('license');
    const surname = url.searchParams.get('surname');
    const status = url.searchParams.get('status');

    console.log('üèÜ GET /api/athletes –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', {
      discipline, country, license, surname, status
    });

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    const athletes = AthletesStorage.filter({
      discipline: discipline || undefined,
      country: country || undefined,
      license: license || undefined,
      surname: surname || undefined,
      status: status || undefined
    });

    const stats = AthletesStorage.getStats();

    return NextResponse.json({
      athletes: athletes.map(athlete => ({
        ...athlete,
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —á—É—Ç–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø—É–±–ª—ñ—á–Ω–æ–º—É API
        email: athlete.email.replace(/(.{2}).*(@.*)/, '$1***$2')
      })),
      total: athletes.length,
      filters: { discipline, country, license, surname, status },
      stats,
      debug: {
        storageType: 'ATHLETES_STORAGE',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ GET /api/athletes:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤' },
      { status: 500 }
    );
  }
}

// POST - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const athleteData: Partial<Athlete> = body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!athleteData.firstName || !athleteData.lastName || !athleteData.email) {
      return NextResponse.json(
        { error: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: firstName, lastName, email' },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –≤–∂–µ —ñ—Å–Ω—É—î
    const existing = AthletesStorage.findByEmail(athleteData.email!);
    if (existing) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î' },
        { status: 409 }
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
    const newAthlete: Athlete = {
      id: `athlete-${Date.now()}`,
      license: athleteData.license || `FUSAF-${Date.now()}`,
      title: athleteData.title || '',
      lastName: athleteData.lastName!,
      firstName: athleteData.firstName!,
      email: athleteData.email!,
      gender: athleteData.gender || 'female',
      country: athleteData.country || '–£–∫—Ä–∞—ó–Ω–∞',
      placeOfBirth: athleteData.placeOfBirth || '',
      yearOfBirth: athleteData.yearOfBirth,
      disciplines: athleteData.disciplines || ['–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–µ—Ä–æ–±—ñ–∫–∞'],
      club: athleteData.club || '',
      coach: athleteData.coach || '',
      profileImage: athleteData.profileImage || '',
      biography: athleteData.biography || '',
      media: athleteData.media || [],
      achievements: athleteData.achievements || [],
      results: athleteData.results || [],
      personalBests: athleteData.personalBests || {},
      registrationDate: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      status: 'active',
      visibility: 'public'
    };

    AthletesStorage.add(newAthlete);

    console.log('‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', {
      id: newAthlete.id,
      name: `${newAthlete.firstName} ${newAthlete.lastName}`,
      email: newAthlete.email
    });

    return NextResponse.json({
      message: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      athlete: newAthlete
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ POST /api/athletes:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
      { status: 500 }
    );
  }
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export async function PUT(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { athleteId, ...updates } = body;

    if (!athleteId) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
        { status: 400 }
      );
    }

    const success = AthletesStorage.update(athleteId, updates);

    if (!success) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    console.log('‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', athleteId);

    return NextResponse.json({
      message: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      athleteId
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ PUT /api/athletes:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
      { status: 500 }
    );
  }
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export async function DELETE(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤' },
        { status: 403 }
      );
    }

    const url = new URL(request.url);
    const athleteId = url.searchParams.get('id');

    if (!athleteId) {
      return NextResponse.json(
        { error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
        { status: 400 }
      );
    }

    // –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const athlete = AthletesStorage.findById(athleteId);
    if (athlete?.email === 'andfedos@gmail.com') {
      return NextResponse.json(
        { error: '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
        { status: 403 }
      );
    }

    const success = AthletesStorage.remove(athleteId);

    if (!success) {
      return NextResponse.json(
        { error: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:', athleteId);

    return NextResponse.json({
      message: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–æ',
      athleteId
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ DELETE /api/athletes:', error);
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞' },
      { status: 500 }
    );
  }
}
