import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { HybridStorage, type RoleRequest } from '@/lib/hybrid-storage';
import { sendRoleStatusEmail } from '@/lib/email-service';

// üî• PERSISTENT STORAGE API - –í–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ Netlify Function Isolation
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î LocalStorage + API —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏

console.log('üöÄ Role requests API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ PERSISTENT STORAGE');

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function GET(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Ç—ñ–≤' },
        { status: 403 }
      );
    }

    const url = new URL(request.url);
    const status = url.searchParams.get('status');

    console.log('üìã GET –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ PERSISTENT storage –¥–ª—è:', session.user.email);

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ HybridStorage
    const allRequests = HybridStorage.getAll();
    let filteredRequests = allRequests;

    if (status && status !== 'all') {
      filteredRequests = allRequests.filter(req => req.status === status);
    }

    console.log('üìã GET –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Ä–æ–ª—ñ –∑ HYBRID —Å—Ö–æ–≤–∏—â–∞:', {
      total: allRequests.length,
      filtered: filteredRequests.length,
      status,
      storageType: 'HYBRID_STORAGE'
    });

    return NextResponse.json({
      requests: filteredRequests.sort((a, b) =>
        new Date(b.requestDate).getTime() - new Date(a.requestDate).getTime()
      ),
      total: filteredRequests.length,
      debug: {
        globalTotal: allRequests.length,
        storageType: 'PERSISTENT_LOCALSTORAGE',
        lastUpdate: new Date().toISOString(),
        stats: HybridStorage.getStats(),
        note: '–î–∞–Ω—ñ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—à–∏–º–∏'
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–æ–ª—ñ:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Ä–æ–ª—å
export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.email) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { requestedRole, reason } = body;

    console.log('üìù POST –∑–∞–ø–∏—Ç –∑ HYBRID storage:', {
      userEmail: session.user.email,
      requestedRole,
      reasonLength: reason?.length
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!requestedRole || !['club_owner', 'coach_judge'].includes(requestedRole)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å –¥–ª—è –∑–∞–ø–∏—Ç—É' },
        { status: 400 }
      );
    }

    if (!reason || reason.trim().length < 10) {
      return NextResponse.json(
        { error: '–û–ø–∏—Å –ø—Ä–∏—á–∏–Ω–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤' },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const existingRequest = HybridStorage.findByEmailAndStatus(session.user.email, 'pending');

    if (existingRequest) {
      console.log('‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Ç:', existingRequest.id);
      return NextResponse.json(
        { error: '–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Ä–æ–ª—å' },
        { status: 409 }
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
    const newRequest: RoleRequest = {
      id: Date.now().toString(),
      userEmail: session.user.email,
      userName: session.user.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      currentRole: 'athlete',
      requestedRole,
      reason: reason.trim(),
      status: 'pending',
      requestDate: new Date().toISOString()
    };

    console.log('üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —É HYBRID —Å—Ö–æ–≤–∏—â—ñ:', {
      id: newRequest.id,
      userEmail: newRequest.userEmail,
      requestedRole: newRequest.requestedRole
    });

    // –î–æ–¥–∞—î–º–æ –¥–æ hybrid storage
    HybridStorage.add(newRequest);

    const stats = HybridStorage.getStats();
    console.log('‚úÖ –ó–∞–ø–∏—Ç –¥–æ–¥–∞–Ω–æ –¥–æ HYBRID —Å—Ö–æ–≤–∏—â–∞:', stats);

    return NextResponse.json({
      message: '–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      request: newRequest,
      debug: {
        totalRequests: stats.total,
        storageType: 'HYBRID_STORAGE',
        requestId: newRequest.id,
        stats
      }
    }, { status: 201 });

  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–æ–ª—å:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export async function PUT(request: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.roles?.includes('admin')) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { requestId, status, comment } = body;

    console.log('üîÑ PUT –∑–∞–ø–∏—Ç –¥–ª—è HYBRID storage:', {
      requestId,
      status,
      adminEmail: session.user.email
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!requestId || !status || !['approved', 'rejected'].includes(status)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É' },
        { status: 400 }
      );
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const allRequests = HybridStorage.getAll();
    const targetRequest = allRequests.find(req => req.id === requestId);

    if (!targetRequest) {
      return NextResponse.json(
        { error: '–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É –≤ HybridStorage
    const updateData = {
      status: status as 'approved' | 'rejected',
      reviewedBy: session.user.email || 'unknown',
      reviewDate: new Date().toISOString(),
      reviewComment: comment || ''
    };

    const updateSuccess = HybridStorage.update(requestId, updateData);

    if (!updateSuccess) {
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É' },
        { status: 500 }
      );
    }

    console.log('‚úÖ –ó–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ HYBRID storage:', {
      requestId,
      status,
      reviewedBy: session.user.email
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    try {
      const emailResult = await sendRoleStatusEmail(
        targetRequest.userEmail,
        status,
        {
          userName: targetRequest.userName,
          requestedRole: targetRequest.requestedRole,
          reviewedBy: session.user.email || '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
          reviewComment: comment
        }
      );

      console.log('üìß Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', emailResult.success ? '–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ø–æ–º–∏–ª–∫–∞');
    } catch (emailError) {
      console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', emailError);
    }

    return NextResponse.json({
      message: `–ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ ${status === 'approved' ? '—Å—Ö–≤–∞–ª–µ–Ω–æ' : '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'}`,
      updateData: {
        requestId,
        ...updateData
      },
      debug: {
        storageType: 'HYBRID_STORAGE',
        processedBy: session.user.email,
        timestamp: new Date().toISOString(),
        emailSent: true
      }
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–æ–ª—å:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
