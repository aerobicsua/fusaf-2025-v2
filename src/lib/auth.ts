import { NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import { JWT } from 'next-auth/jwt'
import bcrypt from 'bcryptjs'

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
const users = [
  {
    id: '1',
    email: 'andfedos@gmail.com',
    name: '–ê–Ω–¥—Ä—ñ–π –§–µ–¥–æ—Å–µ–Ω–∫–æ',
    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewaBnBdmcvrZub.', // password123
    roles: ['admin', 'user']
  },
  {
    id: '2',
    email: 'coach@fusaf.org.ua',
    name: '–¢—Ä–µ–Ω–µ—Ä –§–£–°–ê–§',
    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewaBnBdmcvrZub.', // password123
    roles: ['coach_judge', 'user']
  },
  {
    id: '3',
    email: 'athlete@fusaf.org.ua',
    name: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω –§–£–°–ê–§',
    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewaBnBdmcvrZub.', // password123
    roles: ['athlete', 'user']
  }
]

export const authOptions: NextAuthOptions = {
  session: {
    strategy: 'jwt',
    maxAge: 24 * 60 * 60, // 24 –≥–æ–¥–∏–Ω–∏
  },
  pages: {
    signIn: '/auth/signin',
  },
  providers: [
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: '–ü–∞—Ä–æ–ª—å', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ')
        }

        console.log('üîê –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', credentials.email)

        const user = users.find(u => u.email === credentials.email)

        if (!user) {
          console.log('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', credentials.email)
          throw new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ')
        }

        const isValidPassword = await bcrypt.compare(credentials.password, user.password)

        if (!isValidPassword) {
          console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', credentials.email)
          throw new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ')
        }

        console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è:', user.email, '–†–æ–ª—ñ:', user.roles)

        return {
          id: user.id,
          email: user.email,
          name: user.name,
          roles: user.roles
        }
      }
    })
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      if (user) {
        token.roles = user.roles || ['user']
        token.id = user.id
        console.log('üé´ JWT —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è:', user.email, '–†–æ–ª—ñ:', token.roles)
      }
      return token
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id as string
        session.user.roles = token.roles as string[]
        console.log('üë§ –°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è:', session.user.email, '–†–æ–ª—ñ:', session.user.roles)
      }
      return session
    },
  },
  secret: process.env.NEXTAUTH_SECRET || 'fusaf-secret-key-2025',
  debug: process.env.NODE_ENV === 'development',
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function registerUser(email: string, password: string, name: string) {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
  const existingUser = users.find(u => u.email === email)
  if (existingUser) {
    throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î')
  }

  // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
  const hashedPassword = await bcrypt.hash(password, 12)

  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const newUser = {
    id: (users.length + 1).toString(),
    email,
    name,
    password: hashedPassword,
    roles: ['athlete', 'user'] // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø–æ—Ä—Ç—Å–º–µ–Ω
  }

  users.push(newUser)
  console.log('‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:', email)

  return {
    id: newUser.id,
    email: newUser.email,
    name: newUser.name,
    roles: newUser.roles
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export function updateUserRoles(userId: string, newRoles: string[]) {
  const userIndex = users.findIndex(u => u.id === userId)
  if (userIndex === -1) {
    throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
  }

  users[userIndex].roles = newRoles
  console.log('‚úÖ –†–æ–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', users[userIndex].email, '–ù–æ–≤—ñ —Ä–æ–ª—ñ:', newRoles)

  return users[userIndex]
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
export function getAllUsers() {
  return users.map(({ password, ...user }) => user) // –í–∏–∫–ª—é—á–∞—î–º–æ –ø–∞—Ä–æ–ª—å
}

// –¢–∏–ø–∏ –¥–ª—è —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export enum UserRole {
  ATHLETE = "athlete",
  CLUB_OWNER = "club_owner",
  COACH_JUDGE = "coach_judge",
  ADMIN = "admin",
  USER = "user"
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª–µ–π
export const hasRole = (userRoles: string[] | undefined, requiredRole: string): boolean => {
  return userRoles?.includes(requiredRole) || userRoles?.includes("admin") || false;
};

export const hasAnyRole = (userRoles: string[] | undefined, requiredRoles: string[]): boolean => {
  if (!userRoles) return false;
  if (userRoles.includes("admin")) return true; // –ê–¥–º—ñ–Ω –º–∞—î –≤—Å—ñ –ø—Ä–∞–≤–∞
  return requiredRoles.some(role => userRoles.includes(role));
};

export const canRegisterTeams = (userRoles: string[] | undefined): boolean => {
  return hasAnyRole(userRoles, ["club_owner", "coach_judge", "admin"]);
};

export const canRegisterIndividual = (userRoles: string[] | undefined): boolean => {
  return hasAnyRole(userRoles, ["athlete", "club_owner", "coach_judge", "admin"]);
};

// –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ NextAuth
declare module "next-auth" {
  interface User {
    id?: string;
    name?: string | null;
    email?: string | null;
    image?: string | null;
    roles?: string[];
    // primaryRole?: string;
    // role?: string; // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
    // roleRequest?: {
    //   status: 'pending' | 'approved' | 'rejected';
    //   requestedRole: string;
    //   requestDate: string;
    // } | null;
  }

  interface Session {
    user: {
      id?: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
      roles?: string[];
      // primaryRole?: string;
      // role?: string; // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
      // roleRequest?: {
      //   status: 'pending' | 'approved' | 'rejected';
      //   requestedRole: string;
      //   requestDate: string;
      // } | null;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id?: string;
    roles?: string[];
    // primaryRole?: string;
    // role?: string; // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
    // roleRequest?: {
    //   status: 'pending' | 'approved' | 'rejected';
    //   requestedRole: string;
    //   requestDate: string;
    // } | null;
  }
}
