// Mock Google Sheets service (removed googleapis dependency)

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Google API
const GOOGLE_SHEETS_SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
export interface ExportConfig {
  title: string;
  type: 'users' | 'competitions' | 'registrations' | 'financial' | 'clubs' | 'analytics';
  dateRange?: {
    start: string;
    end: string;
  };
  filters?: Record<string, any>;
  includeHeaders?: boolean;
}

export interface ExportResult {
  success: boolean;
  spreadsheetId?: string;
  spreadsheetUrl?: string;
  error?: string;
  totalRows?: number;
}

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets
export class GoogleSheetsService {
  private auth: any;
  private sheets: any;

  constructor() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Google Auth
    this.initializeAuth();
  }

  private async initializeAuth() {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ Service Account –∫–ª—é—á
      const credentials = {
        type: 'service_account',
        project_id: process.env.GOOGLE_PROJECT_ID,
        private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID,
        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
        client_email: process.env.GOOGLE_CLIENT_EMAIL,
        client_id: process.env.GOOGLE_CLIENT_ID,
        auth_uri: 'https://accounts.google.com/o/oauth2/auth',
        token_uri: 'https://oauth2.googleapis.com/token',
      };

      // Mock Google Auth (googleapis removed)
      this.auth = null;
      this.sheets = null;
    } catch (error) {
      console.error('Failed to initialize Google Sheets auth:', error);
    }
  }

  // Mock —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
  async createSpreadsheet(title: string): Promise<{ spreadsheetId: string; spreadsheetUrl: string }> {
    const mockId = `mock_sheet_${Date.now()}`;
    const mockUrl = `https://docs.google.com/spreadsheets/d/${mockId}`;

    console.log(`üìä Mock —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: ${title}`);
    return { spreadsheetId: mockId, spreadsheetUrl: mockUrl };
  }

  // Mock –∑–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é
  async writeData(spreadsheetId: string, range: string, values: any[][]): Promise<void> {
    console.log(`üìù Mock –∑–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é ${spreadsheetId}, –¥—ñ–∞–ø–∞–∑–æ–Ω ${range}, —Ä—è–¥–∫—ñ–≤: ${values.length}`);
  }

  // Mock —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
  async formatSpreadsheet(spreadsheetId: string, sheetId = 0): Promise<void> {
    console.log(`üé® Mock —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ${spreadsheetId}`);
  }

  // Mock –µ–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  async exportUsers(config: ExportConfig): Promise<ExportResult> {
    console.log(`üìä Mock –µ–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${config.title}`);

    const { spreadsheetId, spreadsheetUrl } = await this.createSpreadsheet(config.title);

    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      totalRows: 50 // Mock —á–∏—Å–ª–æ
    };
  }

  // Mock –µ–∫—Å–ø–æ—Ä—Ç –∑–º–∞–≥–∞–Ω—å
  async exportCompetitions(config: ExportConfig): Promise<ExportResult> {
    console.log(`üèÜ Mock –µ–∫—Å–ø–æ—Ä—Ç –∑–º–∞–≥–∞–Ω—å: ${config.title}`);

    const { spreadsheetId, spreadsheetUrl } = await this.createSpreadsheet(config.title);

    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      totalRows: 15
    };
  }

  // Mock –µ–∫—Å–ø–æ—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
  async exportRegistrations(config: ExportConfig): Promise<ExportResult> {
    console.log(`üìù Mock –µ–∫—Å–ø–æ—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π: ${config.title}`);

    const { spreadsheetId, spreadsheetUrl } = await this.createSpreadsheet(config.title);

    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      totalRows: 200
    };
  }

  // Mock –µ–∫—Å–ø–æ—Ä—Ç –∫–ª—É–±—ñ–≤
  async exportClubs(config: ExportConfig): Promise<ExportResult> {
    console.log(`üè† Mock –µ–∫—Å–ø–æ—Ä—Ç –∫–ª—É–±—ñ–≤: ${config.title}`);

    const { spreadsheetId, spreadsheetUrl } = await this.createSpreadsheet(config.title);

    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      totalRows: 25
    };
  }

  // Mock —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç
  async exportFinancialReport(config: ExportConfig): Promise<ExportResult> {
    console.log(`üí∞ Mock —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç: ${config.title}`);

    const { spreadsheetId, spreadsheetUrl } = await this.createSpreadsheet(config.title);

    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      totalRows: 100
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É
  async exportData(config: ExportConfig): Promise<ExportResult> {
    if (!this.sheets) {
      await this.initializeAuth();
    }

    switch (config.type) {
      case 'users':
        return this.exportUsers(config);
      case 'competitions':
        return this.exportCompetitions(config);
      case 'registrations':
        return this.exportRegistrations(config);
      case 'clubs':
        return this.exportClubs(config);
      case 'financial':
        return this.exportFinancialReport(config);
      default:
        return {
          success: false,
          error: `–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –µ–∫—Å–ø–æ—Ä—Ç—É: ${config.type}`
        };
    }
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—É (mock)
  private translateRole(role: string): string {
    const roles = {
      'athlete': '–°–ø–æ—Ä—Ç—Å–º–µ–Ω',
      'coach': '–¢—Ä–µ–Ω–µ—Ä',
      'judge': '–°—É–¥–¥—è',
      'club_owner': '–í–ª–∞—Å–Ω–∏–∫ –∫–ª—É–±—É'
    };
    return roles[role as keyof typeof roles] || role;
  }

  private translateCategory(category: string): string {
    const categories = {
      'professional': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞',
      'amateur': '–ê–º–∞—Ç–æ—Ä—Å—å–∫–∞',
      'junior': '–Æ–Ω—ñ–æ—Ä—Å—å–∫–∞'
    };
    return categories[category as keyof typeof categories] || category;
  }

  private translateStatus(status: string): string {
    const statuses = {
      'draft': '–ß–µ—Ä–Ω–µ—Ç–∫–∞',
      'published': '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
      'registration_open': '–í—ñ–¥–∫—Ä–∏—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è',
      'registration_closed': '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞',
      'in_progress': '–ü—Ä–æ—Ö–æ–¥–∏—Ç—å',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
    };
    return statuses[status as keyof typeof statuses] || status;
  }

  private translateRegistrationStatus(status: string): string {
    const statuses = {
      'pending': '–û—á—ñ–∫—É—î',
      'confirmed': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
      'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ',
      'waitlist': '–°–ø–∏—Å–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è'
    };
    return statuses[status as keyof typeof statuses] || status;
  }

  private translatePaymentStatus(status: string): string {
    const statuses = {
      'pending': '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
      'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
      'failed': '–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏',
      'refunded': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ'
    };
    return statuses[status as keyof typeof statuses] || status;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—É
export const googleSheetsService = new GoogleSheetsService();
export default googleSheetsService;
